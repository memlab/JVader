#!/usr/bin/env python
import os
import sys
import pywr
from optparse import OptionParser

def loadWordpool(filename):
    """
    Loads a PyParse wordpool file and returns
    the list of words found.
    """
    fd    = open(filename, "r")
    words = fd.readlines()
    fd.close()
    
    newWords = [] 
    for word in words:
        newWords.append(word.strip())
    
    return newWords


usage = "Usage: pywr_classify.py [options] wordpool_file model_directory file1.wav [file2.wav file3.wav ..]\n\n" +\
        "The model directory must contain the set of *.hmm files used for classification, and fileN\n" +\
        "is a *.wav file to classify. Models can be generated by running pywr_train; there must be\n" +\
        "one model for each word expected to appear in fileN (otherwise you'll see some really\n" +\
        "strange results). For each wav file, a fileN.tpa file is generated with the classified\n" +\
        "uterrances and can subsequently be used by PyParse and other compatible software."

optParse = OptionParser(usage=usage)
optParse.add_option("--bgFile", help="Path to a .wav file with a recording of typical background noise. " +\
                                     "A default background profile (with little noise) is used if none provided.")
(opts, args) = optParse.parse_args()
if len(args) < 3:
    optParse.error("Please specify the woordpool file, the models directory, and at least one .wav file to parse.")

if opts.bgFile != None and not os.access(opts.bgFile, os.F_OK):
    sys.exit("The specified background noise file does not exist.")

wordFile = os.path.expanduser(args[0]) 
if not os.access(wordFile, os.F_OK):
    sys.exit("The specified word pool file does not exist.")
words = loadWordpool(wordFile)

modelDir = os.path.expanduser(args[1])
if not os.access(modelDir, os.F_OK):
    sys.exit("The specified training directory does not exist.")

files = []
for i in range(2, len(args)):
    file = os.path.expanduser(args[i])
    if not os.access(file, os.F_OK):
        sys.exit("The file '%s' doesn't exist." % file)
    files.append(file)

models = pywr.loadModels(modelDir)
garbageModel = pywr.loadGarbageModel()
for file in files:
    tpaFile = file[:-4] + ".tpa"
    parFile = file[:-4] + ".par"
    if not os.access(tpaFile, os.F_OK) and not os.access(parFile, os.F_OK):
        (dir, filename) = os.path.split(file)
        print "Classifying: ", filename[:-4]
        (input, samplingRate) = pywr.loadSpeech(file)
        (endpoints, labels) = pywr.classify(input, samplingRate, models, garbageModel, True, opts.bgFile)
   
        fd = open(tpaFile, "w")
        for i in range(len(endpoints)):
            if words.count(labels[i]) > 0:
                wordIndex = words.index(labels[i])+1
            else:
                wordIndex = -1
            fd.write(str(pywr.ix2ms(endpoints[i][0], samplingRate)) + "\t" +\
                     str(wordIndex) + "\t" +\
                     labels[i] + "\n")
        fd.close()

